DROP TABLE WALLETS;
DROP TABLE HISTORIC;

CREATE TABLE WALLETS(
    ID_WALLET INTEGER NOT NULL,
    BALANCE NUMBER(*,2) NOT NULL,
    CREATED_AT DATE DEFAULT SYSDATE,
    FK_ID_USER INTEGER NOT NULL,

    CONSTRAINT PK_ID_WALLET PRIMARY KEY (ID_WALLET),
    CONSTRAINT FK_ID_USER_WALLET FOREIGN KEY (FK_ID_USER) REFERENCES ACCOUNTS(ID)
);

CREATE TABLE HISTORIC(
    TRANSACTION_ID INTEGER NOT NULL,
    TRANSACTION_TYPE VARCHAR2(50) NOT NULL,
    TRANSACTION_DATE DATE DEFAULT SYSDATE,
    TRANSACTION_VALUE NUMBER(*,2) NOT NULL,
    FK_ID_WALLET INTEGER NOT NULL,

    CONSTRAINT PK_ID_TRANSACTION PRIMARY KEY (TRANSACTION_ID),
    CONSTRAINT FK_ID_WALLET FOREIGN KEY (FK_ID_WALLET) REFERENCES WALLETS (ID_WALLET)
);


INSERT INTO HISTORIC 
    (TRANSACTION_ID, TRANSACTION_TYPE, TRANSACTION_VALUE, FK_ID_WALLET) 
VALUES 
    (SEQ_TRANSACTION.NEXTVAL, 
    'Credito', 
    100.00, 
    62);

-- ADICIONAR TRATAMENTO DE ERRO PARA TOKEN OU EMAIL JÁ ADICIONADOS
CREATE SEQUENCE SEQ_WALLETS START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_TRANSACTION START WITH 1 INCREMENT BY 1;

INSERT INTO WALLETS (ID_WALLET, BALANCE, FK_ID_USER)
VALUES (
    SEQ_WALLETS.NEXTVAL,
    100.00,  -- Saldo inicial, pode ser ajustado conforme necessário
    (SELECT ID FROM ACCOUNTS WHERE EMAIL = 'enzo@puc')
);

INSERT INTO WALLETS (ID_WALLET, BALANCE, FK_ID_USER)
VALUES (
    SEQ_WALLETS.NEXTVAL,
    150.00,  -- Saldo inicial, pode ser ajustado conforme necessário
    (SELECT ID FROM ACCOUNTS WHERE EMAIL = 'rogerio@puc')
);

COMMIT;